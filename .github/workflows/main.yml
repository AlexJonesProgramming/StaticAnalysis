# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2019
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed
        dotnet-version: [ '4.7.1' ]
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@v3
        
      #Cache the unity build to speed up future builds?
      #- uses: actions/cache@v2
      #  with:
      #    path: Library
      #    key: Library-${{ matrix.targetPlatform }}
      #    restore-keys: Library-
        
      #- name: Initialize CodeQL
      #  uses: github/codeql-action/init@v2
      #  with: 
      #    languages: ${{ matrix.language }}
        
      # Builds the unity project
      #- name: Build-the-freaking-project-please
      #  uses: game-ci/unity-builder@v2
      #  env:
      #    UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      #    UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      #    UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
      #  with:
      #    targetPlatform: Android
      
      
      - name: Install component on windows 2022
        run: |
          Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
          $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          $componentsToAdd = @(
            ".NET Framework 4.7.1 SDK"
          )
          [string]$workloadArgs = $componentsToAdd | ForEach-Object {" --add " +  $_}
          $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
          $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
          if ($process.ExitCode -eq 0)
          {
              Write-Host "components have been successfully added"
          }
          else
          {
              Write-Host "components were not installed"
              exit 1
          }

      - name: Set up .NET
        uses: xt0rted/setup-dotnet@v1.0.0
        with:
          dotnet-version: 4.7.1

      #- name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
      #  uses: actions/setup-dotnet@v2
      #  with:
      #    dotnet-version: ${{ matrix.dotnet-version }}
      
      - name: Install dependencies
        run: dotnet restore Nope.sln
      
      - name: Build
        run: |
          dotnet build Nope.sln /p:UseSharedCompilation=false
       
      #- name: Perform CodeQL Analysis
      #  uses: github/codeql-action/analyze@v2
